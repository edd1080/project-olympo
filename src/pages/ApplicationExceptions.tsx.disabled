// Archivo deshabilitado - funcionalidad de excepciones removida
// Este archivo se conserva solo como referencia histórica

import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft, Upload, X } from 'lucide-react';
import { useAppState } from '@/context/AppStateContext';
import { useToast } from '@/hooks/use-toast';

// Código original comentado ya que la funcionalidad fue removida
/*
interface ExceptionData {
  comment: string;
  documents: File[];
}

const ApplicationExceptions: React.FC = () => {
  const [exceptionData, setExceptionData] = useState<ExceptionData>({
    comment: '',
    documents: []
  });
  
  const navigate = useNavigate();
  const location = useLocation();
  const { addAlert } = useAppState();
  const { toast } = useToast();
  
  const { prequalificationResult, identityData, applicationId } = location.state || {};

  const handleDocumentUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setExceptionData(prev => ({
      ...prev,
      documents: [...prev.documents, ...files]
    }));
  };

  const removeDocument = (index: number) => {
    setExceptionData(prev => ({
      ...prev,
      documents: prev.documents.filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = () => {
    if (exceptionData.comment.trim().length < 10) {
      toast({
        title: "Error de validación",
        description: "La justificación debe tener al menos 10 caracteres",
        variant: "destructive"
      });
      return;
    }

    // Mock alert creation
    addAlert({
      id: Date.now(),
      title: "Excepción enviada",
      description: "Tu justificación ha sido enviada para revisión",
      date: new Date().toISOString(),
      read: false,
      group: 'today'
    });

    toast({
      title: "Excepción enviada",
      description: "Tu justificación será revisada por nuestro equipo"
    });

    // Continue to official form with the same data
    navigate('/applications/oficial/new', {
      state: { 
        applicationId,
        identityData,
        prequalificationResult,
        hasExceptions: true,
        exceptionData
      }
    });
  };

  const handleGoBack = () => {
    navigate('/applications');
  };

  return (
    <div className="min-h-screen bg-background">
      <div className="sticky top-0 z-10 bg-background border-b">
        <div className="container mx-auto px-4 py-4 flex items-center gap-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={handleGoBack}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-lg font-semibold">Justificar Excepción</h1>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <div className="max-w-2xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle className="text-xl">Solicitud requiere justificación</CardTitle>
              <p className="text-muted-foreground">
                Tu solicitud ha sido precalificada pero requiere justificación adicional para continuar.
              </p>
            </CardHeader>
            <CardContent className="space-y-6">
              {prequalificationResult?.reason && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <h3 className="font-medium text-yellow-800 mb-2">Motivo de la precalificación:</h3>
                  <p className="text-yellow-700 text-sm">{prequalificationResult.reason}</p>
                </div>
              )}

              <div className="space-y-3">
                <label className="text-sm font-medium">
                  Justificación de la excepción *
                </label>
                <Textarea
                  placeholder="Explica las razones por las cuales consideras que tu solicitud debe ser aprobada..."
                  value={exceptionData.comment}
                  onChange={(e) => setExceptionData(prev => ({ ...prev, comment: e.target.value }))}
                  className="min-h-[120px]"
                />
                <p className="text-xs text-muted-foreground">
                  Mínimo 10 caracteres. Sé específico y detallado.
                </p>
              </div>

              <div className="space-y-3">
                <label className="text-sm font-medium">
                  Documentos de soporte (opcional)
                </label>
                <div className="border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center">
                  <input
                    type="file"
                    multiple
                    accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                    onChange={handleDocumentUpload}
                    className="hidden"
                    id="file-upload"
                  />
                  <label
                    htmlFor="file-upload"
                    className="cursor-pointer flex flex-col items-center gap-2"
                  >
                    <Upload className="h-8 w-8 text-muted-foreground" />
                    <p className="text-sm text-muted-foreground">
                      Sube documentos que respalden tu justificación
                    </p>
                    <p className="text-xs text-muted-foreground">
                      PDF, JPG, PNG, DOC (máximo 5MB cada uno)
                    </p>
                  </label>
                </div>

                {exceptionData.documents.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Documentos seleccionados:</p>
                    {exceptionData.documents.map((file, index) => (
                      <div key={index} className="flex items-center justify-between bg-muted p-2 rounded">
                        <span className="text-sm truncate">{file.name}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => removeDocument(index)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              <div className="flex gap-3 pt-4">
                <Button
                  onClick={handleSubmit}
                  className="flex-1"
                  disabled={exceptionData.comment.trim().length < 10}
                >
                  Enviar Justificación
                </Button>
                <Button
                  variant="outline"
                  onClick={handleGoBack}
                  className="flex-1"
                >
                  Cancelar
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ApplicationExceptions;
*/